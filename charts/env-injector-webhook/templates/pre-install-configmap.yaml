apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "chart-env-injector.name" . }}-ca-config
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "chart-env-injector.name" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ template "chart-env-injector.chart" . }}
    release: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-3"
data:
  config.sh: |
    #!/bin/bash

    set -e

    usage() {
        cat <<EOF
    Generate certificate suitable for use with an env-injector webhook service.

    This script uses k8s' CertificateSigningRequest API to a generate a
    certificate signed by k8s CA suitable for use with env-injector webhook
    services. This requires permissions to create and approve CSR. See
    https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster for
    detailed explantion and additional instructions.

    The server key/cert k8s CA cert are stored in a k8s secret.

    usage: ${0} [OPTIONS]

    The following flags are required.

           --service          Service name of webhook.
           --namespace        Namespace where webhook service and secret reside.
           --secret           Secret name for CA certificate and server certificate/key pair.
           --webhook          Webhook config name.
    EOF
        exit 1
    }

    while [[ $# -gt 0 ]]; do
        case ${1} in
            --service)
                service="$2"
                shift
                ;;
            --secret)
                secret="$2"
                shift
                ;;
            --namespace)
                namespace="$2"
                shift
                ;;
            --webhook)
                webhook="$2"
                shift
                ;;
            *)
                usage
                ;;
        esac
        shift
    done

    [ -z ${service} ] && service={{ include "chart-env-injector.name" . }}-svc
    [ -z ${secret} ] && secret={{ include "chart-env-injector.name" . }}-certs
    [ -z ${namespace} ] && namespace={{ .Release.Namespace }}
    [ -z ${webhook} ] && webhook={{ include "chart-env-injector.name" . }}-cfg

    if [ ! -x "$(command -v openssl)" ]; then
        echo "openssl not found"
        exit 1
    fi

    tmpdir=$(mktemp -d)

    echo "generating ca in tmpdir ${tmpdir} "

    openssl req -new -sha256 -nodes -newkey rsa:4096 -subj "/O=env-injector-webhook/CN=${service}.${namespace}.svc" -keyout ${tmpdir}/ca.key -out ${tmpdir}/ca.csr
    openssl x509 -req -sha256 -in ${tmpdir}/ca.csr -signkey ${tmpdir}/ca.key -days 3650 -out ${tmpdir}/ca.crt

    echo "signing certs in tmpdir ${tmpdir} "

    cat <<EOF >> ${tmpdir}/csr.conf
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    extendedKeyUsage = serverAuth
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = ${service}
    DNS.2 = ${service}.${namespace}
    DNS.3 = ${service}.${namespace}.svc
    EOF

    openssl req -new -nodes -newkey rsa:4096 -subj "/CN=${service}.${namespace}.svc;/O=env-injector-webhook" -keyout ${tmpdir}/server.key -out ${tmpdir}/server.csr -config ${tmpdir}/csr.conf
    openssl x509 -req -CA ${tmpdir}/ca.crt -CAkey ${tmpdir}/ca.key -CAcreateserial -sha256 -days 3650 -in ${tmpdir}/server.csr -out ${tmpdir}/server.crt

    # create the secret with CA cert and server cert/key
    kubectl create secret generic ${secret} \
            --from-file=key.pem=${tmpdir}/server.key \
            --from-file=cert.pem=${tmpdir}/server.crt \
            --dry-run=client -o yaml |
        kubectl -n ${namespace} apply -f -


    # Patch the webhook adding the caBundle.
    set +e
    export caBundle=$(cat ${tmpdir}/ca.crt | base64 | tr -d '\n')
    while true; do
      echo "INFO: Trying to patch webhook adding the caBundle."
      if kubectl patch mutatingwebhookconfiguration "${webhook}" --type='json' -p "[{'op': 'add', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'${caBundle}'}]"; then
          break
      fi
      echo "INFO: webhook not patched. Retrying in 5s..."
      sleep 5
    done
